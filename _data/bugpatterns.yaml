'On by default : WARNING':
- {name: ElementsCountedInLoop, summary: 'This code, which counts elements using a
    loop, can be replaced by a simpler library method'}
- {name: EqualsHashCode, summary: Classes that override equals should also override hashCode.}
- {name: Finally, summary: 'If you return or throw from a finally, then values returned
    or thrown from the try-catch block will be ignored'}
- {name: IncompatibleModifiers, summary: This annotation has incompatible modifiers as specified by its @IncompatibleModifiers annotation}
- {name: MisusedFormattingLogger, summary: FormattingLogger uses wrong or mismatched format string}
- {name: NonAtomicVolatileUpdate, summary: This update of a volatile variable is non-atomic}
- {name: PreconditionsInvalidPlaceholder, summary: Preconditions only accepts the %s placeholder in error message strings}
- {name: ProtoFieldPreconditionsCheckNotNull, summary: 'Protobuf fields cannot be
    null, so this check is redundant'}
- {name: RequiredModifiers, summary: This annotation is missing required modifiers as specified by its @RequiredModifiers annotation}
- {name: StaticAccessedFromInstance, summary: A static variable or method should not be accessed from an object instance}
- {name: StringEquality, summary: String comparison using reference equality instead of value equality}
- {name: SynchronizeOnNonFinalField, summary: 'Synchronizing on non-final fields is
    not safe: if the field is ever updated, different threads may end up locking on
    different objects.'}
- {name: TypeParameterUnusedInFormals, summary: 'Declaring a type parameter that is
    only used in the return type is a misuse of generics: operations on the type parameter
    are unchecked, it hides unsafe casts at invocations of the method, and it interacts
    badly with method overload resolution'}
- {name: WaitNotInLoop, summary: Object.wait() should always be called in a loop}
'On by default : ERROR':
- {name: ArrayEquals, summary: Reference equality used to compare arrays}
- {name: ArrayHashCode, summary: hashcode method on array does not hash array contents}
- {name: ArrayToString, summary: Calling toString on an array does not provide useful information}
- {name: ArrayToStringCompoundAssignment, summary: Implicit toString used on an array (String += Array)}
- {name: ArrayToStringConcatenation, summary: Implicit toString used on an array (String + Array)}
- {name: BadShiftAmount, summary: Shift by an amount that is out of range}
- {name: ChainingConstructorIgnoresParameter, summary: 'The called constructor accepts
    a parameter with the same name and type as one of its caller''s parameters, but
    its caller doesn''t pass that parameter to it.  It''s likely that it was intended
    to.'}
- {name: CheckReturnValue, summary: Ignored return value of method that is annotated with @CheckReturnValue}
- {name: ComparisonOutOfRange, summary: Comparison to value that is out of range for the compared type}
- {name: CompileTimeConstant, summary: Non-compile-time constant expression passed to parameter with @CompileTimeConstant type annotation}
- {name: DeadException, summary: Exception created but not thrown}
- {name: DepAnn, summary: Deprecated item is not annotated with @Deprecated}
- {name: EqualsNaN, summary: == NaN always returns false; use the isNaN methods instead}
- {name: ForOverride, summary: Method annotated @ForOverride must be protected and only invoked from declaring class}
- {name: GuiceAssistedInjectScoping, summary: Scope annotation on implementation class of AssistedInject factory is not allowed}
- {name: InvalidPatternSyntax, summary: Invalid syntax used for a regular expression}
- {name: JUnit3TestNotRun, summary: Test method will not be run; please prefix name with "test"}
- {name: JUnit4SetUpNotRun, summary: setUp() method will not be run; Please add a @Before annotation}
- {name: JUnit4TearDownNotRun, summary: tearDown() method will not be run; Please add an @After annotation}
- {name: JUnit4TestNotRun, summary: Test method will not be run; please add @Test annotation}
- {name: LongLiteralLowerCaseSuffix, summary: Prefer 'L' to 'l' for the suffix to long literals}
- {name: MisusedWeekYear, summary: Use of "YYYY" (week year) in a date pattern without "ww" (week in year). You probably meant to use "yyyy" (year) instead.}
- {name: NarrowingCompoundAssignment, summary: 'Compound assignments to bytes, shorts,
    chars, and floats hide dangerous casts'}
- {name: Overrides, summary: Varargs doesn't agree for overridden method}
- {name: PreconditionsCheckNotNull, summary: Literal passed as first argument to Preconditions.checkNotNull() can never be null}
- {name: PreconditionsCheckNotNullPrimitive, summary: First argument to Preconditions.checkNotNull() is a primitive rather than an object reference}
- {name: ProtoFieldNullComparison, summary: Protobuf fields cannot be null}
- {name: ReturnValueIgnored, summary: Return value of this method must be used}
- {name: SelfAssignment, summary: Variable assigned to itself}
- {name: SelfEquals, summary: An object is tested for equality to itself}
- {name: StringBuilderInitWithChar, summary: StringBuilder does not have a char constructor; this invokes the int constructor.}
- {name: SuppressWarningsDeprecated, summary: Suppressing "deprecated" is probably a typo for "deprecation"}
- {name: TryFailThrowable, summary: Catching Throwable masks failures from fail() or assert*() in the try block}
'Experimental : WARNING':
- {name: AssertFalse, summary: Assertions may be disabled at runtime and do not guarantee that execution will halt here; consider throwing an exception instead}
- {name: AssistedInjectAndInjectOnConstructors, summary: '@AssistedInject and @Inject
    should not be used on different constructors in the same class.'}
- {name: GuiceInjectOnFinalField, summary: 'Although Guice allows injecting final
    fields, doing so is not recommended because the injected value may not be visible
    to other threads.'}
- {name: JUnitAmbiguousTestClass, summary: Test class mixes JUnit 3 and JUnit 4 idioms}
- {name: OverridesGuiceInjectableMethod, summary: 'This method is not annotated with
    @Inject, but it overrides a method that is annotated with @com.google.inject.Inject.
    Guice will inject this method,and it is recommended to annotate it explicitly.'}
- {name: PreconditionsErrorMessageEagerEvaluation, summary: 'Second argument to Preconditions.*
    is a call to String.format(), which can be unwrapped'}
- {name: PrimitiveArrayPassedToVarargsMethod, summary: Passing a primitive array to a varargs method is usually wrong}
'Experimental : NOT_A_PROBLEM':
- {name: FallthroughSuppression, summary: Fallthrough warning suppression has no effect if warning is suppressed}
'Experimental : ERROR':
- {name: ArraysAsListPrimitiveArray, summary: 'Arrays.asList does not autobox primitive
    arrays, as one might expect.'}
- {name: AssistedInjectAndInjectOnSameConstructor, summary: '@AssistedInject and @Inject
    cannot be used on the same constructor.'}
- {name: AsyncFunctionReturnsNull, summary: 'AsyncFunction should not return a null
    Future, only a Future whose result is null.'}
- {name: CannotMockFinalClass, summary: Mockito cannot mock final classes}
- {name: ClassCanBeStatic, summary: Inner class is non-static but does not reference enclosing class}
- {name: CollectionIncompatibleType, summary: Incompatible type as argument to non-generic Java collections method.}
- {name: CovariantEquals, summary: equals() method doesn't override Object.equals()}
- {name: DivZero, summary: Division by integer literal zero}
- {name: EmptyIf, summary: Empty statement after if}
- {name: GuardedByChecker, summary: Checks for unguarded accesses to fields and methods with @GuardedBy annotations}
- {name: GuardedByValidator, summary: Invalid @GuardedBy expression}
- {name: GuiceAssistedParameters, summary: 'A constructor cannot have two @Assisted
    parameters of the same type unless they are disambiguated with named @Assisted
    annotations. '}
- {name: InjectInvalidTargetingOnScopingAnnotation, summary: The target of a scoping annotation must be set to METHOD and/or TYPE.}
- {name: InjectMoreThanOneQualifier, summary: Using more than one qualifier annotation on the same element is not allowed.}
- {name: InjectMoreThanOneScopeAnnotationOnClass, summary: A class can be annotated with at most one scope annotation}
- {name: InjectScopeAnnotationOnInterfaceOrAbstractClass, summary: Scope annotation on an interface or abstact class is not allowed}
- {name: InjectScopeOrQualifierAnnotationRetention, summary: Scoping and qualifier annotations must have runtime retention.}
- {name: InjectedConstructorAnnotations, summary: Injected constructors cannot be optional nor have binding annotations}
- {name: JavaxInjectOnAbstractMethod, summary: Abstract methods are not injectable with javax.inject.Inject.}
- {name: JavaxInjectOnFinalField, summary: '@javac.inject.Inject cannot be put on
    a final field.'}
- {name: LockMethodChecker, summary: This method does not acquire the locks specified by its @LockMethod annotation}
- {name: MalformedFormatString, summary: Printf-like format string does not match its arguments}
- {name: MissingCasesInEnumSwitch, summary: Enum switch statement is missing cases}
- {name: ModifyingCollectionWithItself, summary: Modifying a collection with itself}
- {name: MoreThanOneInjectableConstructor, summary: A class may not have more than one injectable constructor.}
- {name: NoAllocation, summary: '@NoAllocation was specified on this method, but something
    was found that would trigger an allocation'}
- {name: NonRuntimeAnnotation, summary: Calling getAnnotation on an annotation that is not retained at runtime.}
- {name: NumericEquality, summary: Numeric comparison using reference equality instead of value equality}
- {name: OverlappingQualifierAndScopeAnnotation, summary: Annotations cannot be both Qualifiers/BindingAnnotations and Scopes}
- {name: OverridesJavaxInjectableMethod, summary: 'This method is not annotated with
    @Inject, but it overrides a  method that is  annotated with @javax.inject.Inject.'}
- {name: ParameterPackage, summary: Method parameter has wrong package}
- {name: ProtoStringFieldReferenceEquality, summary: Comparing protobuf fields of type String using reference equality}
- {name: SelfEquality, summary: Variable compared to itself}
- {name: SizeGreaterThanOrEqualsZero, summary: 'Comparison of a size >= 0 is always
    true, did you intend to check for non-emptiness?'}
- {name: UnlockMethod, summary: This method does not acquire the locks specified by its @UnlockMethod annotation}
